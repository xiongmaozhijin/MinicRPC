package com.example.minicrpc.databasedao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.minicrpc.databasedao.SmsSonCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMS_SON_CATEGORY.
*/
public class SmsSonCategoryDao extends AbstractDao<SmsSonCategory, Long> {

    public static final String TABLENAME = "SMS_SON_CATEGORY";

    /**
     * Properties of entity SmsSonCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SonCategoryId = new Property(0, long.class, "sonCategoryId", true, "SON_CATEGORY_ID");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryId = new Property(2, Long.class, "categoryId", false, "CATEGORY_ID");
    };

    private DaoSession daoSession;

    private Query<SmsSonCategory> smsCategory_SmsSonCategoryListQuery;

    public SmsSonCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public SmsSonCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMS_SON_CATEGORY' (" + //
                "'SON_CATEGORY_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: sonCategoryId
                "'CATEGORY_NAME' varchar," + // 1: categoryName
                "'CATEGORY_ID' INTEGER);"); // 2: categoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMS_SON_CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SmsSonCategory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSonCategoryId());
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(2, categoryName);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(3, categoryId);
        }
    }

    @Override
    protected void attachEntity(SmsSonCategory entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SmsSonCategory readEntity(Cursor cursor, int offset) {
        SmsSonCategory entity = new SmsSonCategory( //
            cursor.getLong(offset + 0), // sonCategoryId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categoryName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // categoryId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SmsSonCategory entity, int offset) {
        entity.setSonCategoryId(cursor.getLong(offset + 0));
        entity.setCategoryName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoryId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SmsSonCategory entity, long rowId) {
        entity.setSonCategoryId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SmsSonCategory entity) {
        if(entity != null) {
            return entity.getSonCategoryId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "smsSonCategoryList" to-many relationship of SmsCategory. */
    public List<SmsSonCategory> _querySmsCategory_SmsSonCategoryList(Long categoryId) {
        synchronized (this) {
            if (smsCategory_SmsSonCategoryListQuery == null) {
                QueryBuilder<SmsSonCategory> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                smsCategory_SmsSonCategoryListQuery = queryBuilder.build();
            }
        }
        Query<SmsSonCategory> query = smsCategory_SmsSonCategoryListQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

}
