package com.example.minicrpc.databasedao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.example.minicrpc.databasedao.SmsContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMS_CONTENT.
*/
public class SmsContentDao extends AbstractDao<SmsContent, Long> {

    public static final String TABLENAME = "SMS_CONTENT";

    /**
     * Properties of entity SmsContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoryId = new Property(1, Long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property SonCategoryId = new Property(2, Long.class, "sonCategoryId", false, "SON_CATEGORY_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Hots = new Property(4, Integer.class, "hots", false, "HOTS");
    };

    private Query<SmsContent> smsCategory_SmsContentListQuery;
    private Query<SmsContent> smsSonCategory_SmsContentListQuery;

    public SmsContentDao(DaoConfig config) {
        super(config);
    }
    
    public SmsContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMS_CONTENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CATEGORY_ID' INTEGER," + // 1: categoryId
                "'SON_CATEGORY_ID' INTEGER," + // 2: sonCategoryId
                "'CONTENT' varchar," + // 3: content
                "'HOTS' INTEGER);"); // 4: hots
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMS_CONTENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SmsContent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        Long sonCategoryId = entity.getSonCategoryId();
        if (sonCategoryId != null) {
            stmt.bindLong(3, sonCategoryId);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Integer hots = entity.getHots();
        if (hots != null) {
            stmt.bindLong(5, hots);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SmsContent readEntity(Cursor cursor, int offset) {
        SmsContent entity = new SmsContent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sonCategoryId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // hots
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SmsContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSonCategoryId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHots(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SmsContent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SmsContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "smsContentList" to-many relationship of SmsCategory. */
    public List<SmsContent> _querySmsCategory_SmsContentList(Long categoryId) {
        synchronized (this) {
            if (smsCategory_SmsContentListQuery == null) {
                QueryBuilder<SmsContent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoryId.eq(null));
                smsCategory_SmsContentListQuery = queryBuilder.build();
            }
        }
        Query<SmsContent> query = smsCategory_SmsContentListQuery.forCurrentThread();
        query.setParameter(0, categoryId);
        return query.list();
    }

    /** Internal query to resolve the "smsContentList" to-many relationship of SmsSonCategory. */
    public List<SmsContent> _querySmsSonCategory_SmsContentList(Long sonCategoryId) {
        synchronized (this) {
            if (smsSonCategory_SmsContentListQuery == null) {
                QueryBuilder<SmsContent> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SonCategoryId.eq(null));
                smsSonCategory_SmsContentListQuery = queryBuilder.build();
            }
        }
        Query<SmsContent> query = smsSonCategory_SmsContentListQuery.forCurrentThread();
        query.setParameter(0, sonCategoryId);
        return query.list();
    }

}
