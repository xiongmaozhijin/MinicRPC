package com.example.minicrpc.databasedao;

import java.util.List;
import com.example.minicrpc.databasedao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SMS_SON_CATEGORY.
 */
public class SmsSonCategory {

    private long sonCategoryId;
    private String categoryName;
    private Long categoryId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SmsSonCategoryDao myDao;

    private List<SmsContent> smsContentList;

    public SmsSonCategory() {
    }

    public SmsSonCategory(long sonCategoryId) {
        this.sonCategoryId = sonCategoryId;
    }

    public SmsSonCategory(long sonCategoryId, String categoryName, Long categoryId) {
        this.sonCategoryId = sonCategoryId;
        this.categoryName = categoryName;
        this.categoryId = categoryId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSmsSonCategoryDao() : null;
    }

    public long getSonCategoryId() {
        return sonCategoryId;
    }

    public void setSonCategoryId(long sonCategoryId) {
        this.sonCategoryId = sonCategoryId;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public Long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Long categoryId) {
        this.categoryId = categoryId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<SmsContent> getSmsContentList() {
        if (smsContentList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SmsContentDao targetDao = daoSession.getSmsContentDao();
            List<SmsContent> smsContentListNew = targetDao._querySmsSonCategory_SmsContentList(sonCategoryId);
            synchronized (this) {
                if(smsContentList == null) {
                    smsContentList = smsContentListNew;
                }
            }
        }
        return smsContentList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetSmsContentList() {
        smsContentList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
